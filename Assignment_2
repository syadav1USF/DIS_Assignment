using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Assignment_2
{
    class Solution
    {
        static void Main(string[] args)
        {

            //Question - 1
            Console.WriteLine("*****Question 1 : Array Intersection*****");

            int[] Int_num1 = { 9, 7, 3, 6, 5, 6 };
            int[] Int_num2 = { 9, 8, 6, 5, 6 };

            int[] result = ArrayIntersection(Int_num1, Int_num2);
            Console.WriteLine("Intersection of given arrays:" + result);

            //Question - 2
            Console.WriteLine("*****Question 2 : Search Target Index*****");
            int[] arr = { 0, 1, 0, 3, 12 };

            Console.WriteLine("Please enter target number:");

            int target = Int32.Parse(Console.ReadLine());
            int index = SearchTarget(arr, target);

            Console.WriteLine("Index of the target in given array : {0}", index);
            Console.WriteLine("");

            //Question - 3
            Console.WriteLine("*****Question 3 : Lucky Integer*****");

            int[] int_arr = { 1, 2, 2, 3, 1, 1, 3 };
            int lucky_int = LuckyInt(int_arr);

            if (lucky_int == -1)
                Console.WriteLine("The Given Array is not having any lucky Integer");
            else
                Console.WriteLine("The Lucky Integer in given array {0}"+ lucky_int);

            Console.WriteLine();

            //Question - 4
            Console.WriteLine("*****Question 4 : Maximum Integer*****");
            Console.WriteLine("Enter any integer value of n:");

            int n = Int32.Parse(Console.ReadLine());
            int Max_int = MaximumInt(n);

            Console.WriteLine("The Maximun integer in the Array is {0}"+ Max_int);
            Console.WriteLine();

            //Question - 5
            Console.WriteLine("*****Question 5 : Destination City - having no loop in graph path*****");

            List<List<string>> paths = new List<List<string>>();
            paths.Add(new List<string>() { "London", "New York" });
            paths.Add(new List<string>() { "New York", "Lima" });
            paths.Add(new List<string>() { "Lima", "Sao Paulo" });

            string[]Dest_City = DestinationCity(paths);

            Console.WriteLine("Destination City for the given paths :" + Dest_City);

            Console.WriteLine();

            //Question - 6
            Console.WriteLine("*****Question 6 : Target Sum*****");

            int[] arr_int = {2,3,4};
            int int_target = 6;
            int[] target_sum = TargetSum(arr_int, int_target);

            Console.WriteLine("The Target Sum :" + target_sum);


            //Question - 7
            Console.WriteLine("*****Question 7 : Top 5 Average*****");

            int[,] score_items = { { 1, 91 }, { 1, 92 }, { 2, 93 }, { 2, 97 }, { 1, 60 }, { 2, 77 }, { 1, 65 }, { 1, 87 }, { 1, 100 }, { 2, 100 }, { 2, 76 } };
            Top5Average(score_items);

            Console.WriteLine();

            //Question - 8
            Console.WriteLine("*****Question 8 : Array Rotation*****");

            int[] nums = { 1, 2, 3, 4, 5, 6, 7 };
            int k = 3;
            int[] final_array = ArrayRotation(nums, k);

            Console.WriteLine("The final array after rotation by k steps :" + final_array);

            //Question - 9
            Console.WriteLine("*****Question 9 : contiguous subarray*****");

            int[] nums1 = { 2, 1, -3, 4, -1, 2, 1, -5, 4};
            int largest_sum = LargestSum(nums1);

            Console.WriteLine("Maximun Sum contiguous subarray :" + largest_sum);
            Console.WriteLine();

            //Question - 10
            Console.WriteLine("*****Question 10 : Minimum Cost for Top floor*****");
            int[] costs = { 1, 100, 1, 1, 1, 100, 1, 1, 100, 1 };
            int minimum_cost = MinimumCost(costs);

            Console.WriteLine("minimum cost to reach the top of the floor : " + minimum_cost);
            Console.WriteLine();

        }


        //Method to merge two words alternatively
        public static int[] ArrayIntersection(int[] Int_num1, int[] Int_num2)
        {
            int[] intersection = Int_num1.Intersect(Int_num2).ToArray();
            return intersection;
        }

        //Method to get index of searched target in given array
        public static int SearchTarget(int[] arr, int target)
        {

            //using binary search to check if the searched target is present in an array or not
            //complexity : O(n)
            try
            {
                int min = 0;
                int max = arr.Length - 1;
                while (min <= max)
                {
                    int middle = min + (max - min) / 2;
                    if (arr[middle] == target)
                        return middle;
                    else if (arr[middle] > target)
                    {
                        max = middle - 1;
                    }
                    else if (arr[middle] < target)
                    {
                        min = middle + 1;
                    }
                }

                return min;
            }
            catch(Exception)
            {

              throw;
            }
        }

        //Method to find lucky integer(frequency = integer value) in an array
        public static int LuckyInt(int[] arr)
        {
            //Using a linq expression
            //Complexity : O(n)
            //Not using for loop as it will increase execution time

            return
                  arr.GroupBy(x => x)
                  .Where(x => x.Count() == x.Key)//Get the elements in the group which has the same key as number of elements.
                  .Select(x => x.Key)
                  .OrderByDescending(x => x).//Order them in descending, to get the largest.
                  DefaultIfEmpty(-1)//return - 1, if there are no lucky numbers.
                  .First();//Always return the first largest.
        }

        //Method to find Maximum integer in an array
        public static int MaximumInt(int n)
        {
            //Time Complexity : O(n)
            //generating an array of size n+1 and keepin track of the maximum element in the array.
           
            if (n <= 0)
                return 0;

            var num = new int[n + 1];
            num[0] = 0;
            num[1] = 1;
            var max = 1;
            for (var i = 2; i < n + 1; i++)
            {
                if (i % 2 == 0)
                    num[2 * (i / 2)] = num[i / 2];
                else
                    num[(2 * (i / 2)) + 1] = num[i / 2] + num[i / 2 + 1];

                max = Math.Max(max, num[i]);
            }

            return max;
        }

        //Method to find Destination City for a given graph path
        public static string DestinationCity(IList<IList<string>> paths)
        {
            //Time Complexity : O(n*m)
            ISet<string> fromSet = new HashSet<string>();
            foreach (var p in paths)
            {
                fromSet.Add(p[0]);
            }

            foreach (var p in paths)
            {
                if (!fromSet.Contains(p[1]))
                {
                    return p[1];
                }
            }

            return "";
        }

        //Method to find Target Sum in an array 
        public static int[] TargetSum(int[] arr_int, int int_target)
        {
            //Time Complexity : O(n)
            
            int l = 0, r = arr_int.Length - 1, sum;
            while (true)
            {
                sum = arr_int[l] + arr_int[r];
                if (sum == int_target)
                    break;
                else if (sum < int_target)
                    l += 1;
                else
                    r -= 1;
            }
            return new int[2] { l + 1, r + 1 };
        }

        //Method to find Top 5 average score of student
        public static int[][] Top5Average(int[][] score_item)
        {
            //Time Complexity: O(logN) 
            
            var dict = new Dictionary<int, List<int>>();
            for (int i = 0; i < score_item.Length; i++)
            {
                if (!dict.ContainsKey(score_item[i][0]))
                    dict.Add(score_item[i][0], new List<int> { score_item[i][1] });
                else
                    dict[score_item[i][0]].Add(score_item[i][1]);
            }
            int[][] average = new int[dict.Keys.Count][];
            int k = 0;
            foreach (KeyValuePair<int, List<int>> kvp in dict.OrderBy(x => x.Key))
            {
                average[k] = new[] { kvp.Key, (int)kvp.Value.OrderByDescending(r => r).Take(5).Average() };
                k++;
            }
            return average;
        }

        //Method to find final array after k steps rotation
        public static int[] ArrayRotation(int[] nums, int k)
        {
       
            //Time complexity: \mathcal{O}(n)O(n).
            var x = new int[nums.Length];
            Array.Copy(nums, x, nums.Length);
            k = k % nums.Length;
            if (k == 0) return null;
            var y = nums[k];
            for (var i = 0; i < nums.Length; i++)
            {
                nums[(i + k) % nums.Length] = x[i];
            }
            return nums;
        }

        //Method to find contiguous subarray
        private static int LargestSum(int[] nums1)
        {
            try
            {
                int Max = nums1[0];
                int count = 0;
                for (int i = 0; i < nums1.Length; i++)
                {
                    count = Math.Max(nums1[i], count + nums1[i]);
                    Max = Math.Max(count, Max);



                }
                return Max;
            }
            catch (Exception)
            {

                throw;
            }
        }

        //Method to find minimum cost to reach the top of the floor.
        private static int MinimumCost(int[] costs)
        {
            try
            {
                int x = costs.Length;
                int[] y = new int[x];
                y[0] = costs[0];
                y[1] = costs[1];
                if (x == 1)
                {
                    return costs[0];
                }
                if (x == 2)
                {
                    return costs.Min();
                }

                for (int i = 2; i < x; i++)
                {
                    y[i] = costs[i] + Math.Min(y[i - 1], y[i - 2]);
                }
                return Math.Min(y[x - 1], y[x - 2]);

            }
            catch (Exception)
            {

                throw;
            }
        }




    }

}






